Metadata-Version: 2.4
Name: semanticize
Version: 0.1.0
Summary: Semantic codebase understanding system
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: flask>=2.0.0
Requires-Dist: pathspec>=0.11.0

# Semanticize

Semantic codebase understanding system that maintains living documentation at three levels of abstraction.

## Overview

Semanticize analyzes your codebase and generates comprehensive documentation at three levels:
- **Technical**: Detailed implementation-level documentation for engineers
- **Developer**: Function/class-level summaries for developers working with the code
- **Executive**: High-level business purpose for non-technical stakeholders

The system uses a graph-based approach to intelligently propagate changes and maintain consistency across the entire codebase.

## Prerequisites

- Python 3.8+
- `gemini` CLI tool installed and in PATH

## Installation

```bash
# Create a virtual environment (recommended)
python3 -m venv venv
source venv/bin/activate

# From the project directory
pip install -e .
```

## Usage

### Initialize a project

```bash
# Navigate to your codebase
cd /path/to/your/project

# Initialize Semanticize
semanticize init

# Or bootstrap with existing description
semanticize init --given-description path/to/description.md
```

### Update after code changes

```bash
semanticize update
```

### Check for inconsistencies

```bash
semanticize check
```

### Launch web viewer

```bash
semanticize launch
```

Opens a web interface at http://localhost:8080 where you can:
- Browse files in a tree view
- Toggle between code and documentation
- Switch between abstraction levels
- View file relationships

## How It Works

1. **Discovery**: Scans your codebase and identifies files to analyze
2. **Analysis**: Uses LLM to generate documentation at all three levels
3. **Graph Building**: Creates a dependency graph with relationships
4. **Propagation**: When files change, intelligently updates only affected documentation
5. **Consistency**: Detects and tracks inconsistencies in the codebase

## Directory Structure

```
your-project/
├── src/
│   └── your code...
└── .semanticize/
    ├── description.technical.md
    ├── description.developer.md
    ├── description.executive.md
    ├── inconsistencies.md
    ├── files/
    │   └── [mirrors your source structure]
    └── edges/
        └── [relationship documentation]
```

## Features

- **Three abstraction levels** for different audiences
- **Intelligent propagation** - only updates what's necessary
- **Dependency tracking** via AST analysis (Python)
- **Inconsistency detection** when code and docs diverge
- **Web viewer** for easy browsing
- **Dynamic ignore** system respects .gitignore

## Development

This project was created for the CBC 24-hour challenge.

See [MVP_PRD.md](MVP_PRD.md) for full product requirements.
